{% extends '../../BaseClassifier.jinja' %}

{% block predict %}
    $votes = {{ prior | to_array }};

    {% for class_idx in range(num_classes) %}
        $votes[{{ class_idx }}] -= 0.5 * $this->joint_log_likelihood($x, {{ theta[class_idx] | to_array }}, {{ sigma_inv[class_idx ] | to_array }});
    {% endfor %}

    {% include '../../_partials/vote.jinja' %}
{% endblock %}

{% block protected %}

     /**
      * Compute joint log likelihood
      * @param $x array
      * @param $theta array
      * @param $invSigma array
      * @return float
      */
     protected function joint_log_likelihood($x, $theta, $invSigma) : float {
        return array_reduce($x, function($likelihood, $x, $i) use ($theta, $invSigma) {
            return $likelihood + pow($x - $theta[$i], 2) * $invSigma[$i];
        }, 0);
     }

{% endblock %}