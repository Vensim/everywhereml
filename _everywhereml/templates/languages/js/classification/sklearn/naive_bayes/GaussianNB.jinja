{% extends '../../BaseClassifier.jinja' %}

{% block predict %}
    let votes = {{ prior | to_array }};

    {% for class_idx in range(num_classes) %}
        votes[{{ class_idx }}] -= 0.5 * this.joint_log_likelihood(x, {{ theta[class_idx] | to_array }}, {{ sigma_inv[class_idx ] | to_array }});
    {% endfor %}

    {% include '../../_partials/vote.jinja' %}
{% endblock %}

{% block protected %}

     /**
      * Compute joint log likelihood
      */
     this.joint_log_likelihood(x, theta, invSigma) {
        return x.reduce(function(likelihood, x, i) {
            return likelihood + Math.pow(x - theta[i], 2) * invSigma[i];
        }, 0);
     }

{% endblock %}